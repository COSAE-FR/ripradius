server apn {
    {{ if ne .RadiusSecret ""}}
    listen {
                type = auth
                ipv4addr = {{.ListenAddress}}
                port = {{.ListenPort}}
                limit {
                              max_connections = 16
                              lifetime = 0
                              idle_timeout = 30
                }
    }
    {{ end }}
    authorize {
        #
        #  Take a User-Name, and perform some checks on it, for spaces and other
        #  invalid characters.  If the User-Name appears invalid, reject the
        #  request.
        #
        #  See policy.d/filter for the definition of the filter_username policy.
        #
        filter_username

        #
        #  The chap module will set 'Auth-Type := CHAP' if we are
        #  handling a CHAP request and Auth-Type has not already been set
        #chap

        #
        #  If the users are logging in with an MS-CHAP-Challenge
        #  attribute for authentication, the mschap module will find
        #  the MS-CHAP-Challenge attribute, and add 'Auth-Type := MS-CHAP'
        #  to the request, which will cause the server to then use
        #  the mschap module for authentication.
        #mschap

        #
        #  This module takes care of EAP-MD5, EAP-TLS, and EAP-LEAP
        #  authentication.
        #
        #  It also sets the EAP-Type attribute in the request
        #  attribute list to the EAP type from the packet.
        #
        #  The EAP module returns "ok" if it is not yet ready to
        #  authenticate the user.  The configuration below checks for
        #  that code, and stops processing the "authorize" section if
        #  so.
        #
        #  Any LDAP and/or SQL servers will not be queried for the
        #  initial set of packets that go back and forth to set up
        #  TTLS or PEAP.
        #
        eap {
            ok = return
        }

        #
        expiration
        logintime

        #
        #  If no other module has claimed responsibility for
        #  authentication, then try to use PAP.  This allows the
        #  other modules listed above to add a "known good" password
        #  to the request, and to do nothing else.  The PAP module
        #  will then see that password, and use it to do PAP
        #  authentication.
        #
        #  This module should be listed last, so that the other modules
        #  get a chance to set Auth-Type for themselves.
        #
        #pap

    }

    authenticate {
        #
        #  Allow EAP authentication.
        eap
    }


    #  Post-Authentication
    #  Once we KNOW that the user has been authenticated, there are
    #  additional steps we can take.
    post-auth {
        update {
            &reply: += &session-state:
        }

        Post-Auth-Type REJECT {
            attr_filter.access_reject

            # Insert EAP-Failure message if the request was
            # rejected by policy instead of because of an
            # authentication failure
            eap

            #  Remove reply message if the response contains an EAP-Message
            remove_reply_message_if_eap
        }
    }
}
